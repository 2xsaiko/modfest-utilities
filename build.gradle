plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.name
version = project.mod + "+" + project.mc
group = project.group

minecraft {
    accessWidener  "src/main/resources/modfestutilities.accesswidener"
}

repositories {
    maven {
    	name = "dv8tion"
	url = "https://m2.dv8tion.net/releases/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.mc}"
    mappings "net.fabricmc:yarn:${project.mc}+build.${project.yarn}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader}"

    modImplementation(fabricApi.module("fabric-api-base", project.fabric))
    modImplementation(fabricApi.module("fabric-command-api-v1", project.fabric))
    modImplementation(fabricApi.module("fabric-lifecycle-events-v1", project.fabric))

    // bot stuff
    include modApi("net.dv8tion:JDA:4.3.0_296") {
        exclude module: 'opus-java'
    }

    // needed for jda to run
//    include("org.slf4j:slf4j-api:1.7.25")
//    include("org.apache.logging.log4j:log4j-slf4j-impl:2.8.1")
//    include("net.sf.trove4j:trove4j:3.0.3")
//    include("org.apache.commons:commons-collections4:4.1")
//    include("com.fasterxml.jackson.core:jackson-databind:2.10.1")
//    include("com.fasterxml.jackson.core:jackson-annotations:2.10.1")
//    include("com.fasterxml.jackson.core:jackson-core:2.10.1")
//    include("com.squareup.okhttp3:okhttp:3.13.0")
//    include("com.squareup.okio:okio:2.6.0")
//    include("com.neovisionaries:nv-websocket-client:2.9")
    modRuntimeMapped("net.fabricmc:fabric-language-kotlin:1.6.2+kotlin.1.5.20") { // includes kotlin for squareup libs
        exclude module: "fabric-loader"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
    	expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"

    options.release = 16
}

java {
	withSourcesJar()
}

jar {
    from("LICENSE") {
    	rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
