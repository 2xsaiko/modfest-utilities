plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.name
version = project.mod + "+" + project.mc
group = project.group

minecraft {
    accessWidener  "src/main/resources/modfestutilities.accesswidener"
}

repositories {
    maven {
        url = "http://maven.fabricmc.net/"
        name = "Fabric"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.mc}"
    mappings "net.fabricmc:yarn:${project.mc}+build.${project.yarn}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader}"

    modImplementation(fabricApi.module("fabric-api-base", project.fabric))
    modImplementation(fabricApi.module("fabric-command-api-v1", project.fabric))

    // bot stuff
    include modApi("net.dv8tion:JDA:4.2.0_175") {
        exclude module: 'opus-java'
    }

    // needed for jda to run
    include("org.slf4j:slf4j-api:1.7.25")
    include("org.apache.logging.log4j:log4j-slf4j-impl:2.8.1")
    include("net.sf.trove4j:trove4j:3.0.3")
    include("org.apache.commons:commons-collections4:4.1")
    include("com.fasterxml.jackson.core:jackson-databind:2.10.1")
    include("com.fasterxml.jackson.core:jackson-annotations:2.10.1")
    include("com.fasterxml.jackson.core:jackson-core:2.10.1")
    include("com.squareup.okhttp3:okhttp:3.13.0")
    include("com.squareup.okio:okio:2.6.0")
    include("com.neovisionaries:nv-websocket-client:2.9")
    modRuntimeMapped("net.fabricmc:fabric-language-kotlin:1.3.72+build.1") // includes kotlin for squareup libs
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
